import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'getMaxStreaks' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY toss as parameter.
     */

    public static List<Integer> getMaxStreaks(List<String> toss) {
    // Return an array of two integers containing the maximum streak of heads and tails respectively
        
        ArrayList<Integer> result = new ArrayList<Integer>(2);
        
        if (toss.size() <= 0) {
            result.add(0); result.add(0);
            return result;
        }
        
        int currentHStreak = 0; int currentTStreak = 0;
        int headStreak = 0, tailStreak = 0;
        
        for (int i = 0; i < toss.size(); i++) {
            if (toss.get(i).equalsIgnoreCase("heads")) {
                currentHStreak++;
                if (currentHStreak > headStreak) {
                    headStreak = currentHStreak;
                }
            }
            else {
                if (currentHStreak > headStreak) {
                    headStreak = currentHStreak;
                }
                currentHStreak = 0;
            }
        }
        
        for (int i = 0; i < toss.size(); i++) {
            if (toss.get(i).equalsIgnoreCase("tails")) {
                currentTStreak++;
                if (currentTStreak > tailStreak) {
                    tailStreak = currentTStreak;
                }
            }
            else {
                if (currentTStreak > headStreak) {
                    tailStreak = currentTStreak;
                }
                currentTStreak = 0;
            }
        }
        
        if (currentHStreak == toss.size()) {
            headStreak = currentHStreak;
        }
        
        if (currentTStreak == toss.size()) {
            tailStreak = currentTStreak;
        }
        
        result.add(headStreak); result.add(tailStreak);
        return result;
        
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int tossCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> toss = IntStream.range(0, tossCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<Integer> ans = Result.getMaxStreaks(toss);

        bufferedWriter.write(
            ans.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
