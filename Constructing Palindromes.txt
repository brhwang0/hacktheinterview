import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'canConstructPalindrome' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER m
     */

    public static String canConstructPalindrome(String s, int m) {
    // The Function should return either "Yes" or "No" as strings.
        
        if (m > s.length()) {
            return "No";
        }
        
        for (int i = 0; i < s.length(); i++) {
            char cur = s.charAt(i);
            if (s.indexOf(cur, i + 1) != -1) {
                m -= 2;
            }
        }
        
        if (m <= 1) {
            System.out.println(m);
            return "Yes";
        }
        else {
            System.out.println(m);
            return "No";
        }

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                int m = Integer.parseInt(firstMultipleInput[1]);

                String s = bufferedReader.readLine();

                String ans = Result.canConstructPalindrome(s, m);

                bufferedWriter.write(ans);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}